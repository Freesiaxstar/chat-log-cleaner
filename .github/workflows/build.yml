# GitHub Actions workflow: 自动在多个平台上构建可执行文件
name: Build Multi-Platform
permissions:
  contents: write  # 允许创建和更新 release
  packages: write  # 允许管理发布包
  actions: read    # 允许读取 Actions 元数据

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      VERSION: 0.5 # Bumped version to v0.5
    outputs:
      version: ${{ env.VERSION }} # Expose the version as an output
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Cache pip dependencies to speed up installs
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      # Cache Nuitka build cache to reuse object files
      - name: Cache Nuitka
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/nuitka
            build
          key: ${{ runner.os }}-nuitka

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          # Use quiet mode and disable version check to speed up pip upgrade
          python -m pip install --upgrade pip --disable-pip-version-check -q
          pip install -r requirements.txt
          pip install pyinstaller
          # 预编译所有 .py 文件以生成 .pyc，提速首次加载
          python -m compileall .

      - name: Build executable
        run: |
          # 使用 Nuitka 进行统一打包，保持高性能并行编译
          pip install nuitka
          JOBS=$(nproc || echo $NUMBER_OF_PROCESSORS)
          # 构造基础参数
          ARGS="--standalone --enable-plugin=pyqt5 --jobs=$JOBS --lto=no --output-dir=dist/main main.py"
          # Windows 上添加关闭控制台模式
          if [ "${RUNNER_OS}" == "Windows" ]; then
            ARGS="--standalone --windows-console-mode=disable --enable-plugin=pyqt5 --jobs=$JOBS --lto=no --output-dir=dist/main main.py"
          fi
          python -m nuitka $ARGS
        shell: bash

      - name: Rename and package executable
        run: |
          if [ "${RUNNER_OS}" == "Windows" ]; then
            # 重命名主可执行文件
            mv dist/main/main.exe dist/main/chat-log-cleaner-v${VERSION}.exe
            # Package the whole directory for --onedir
            mv dist/main dist/chat-log-cleaner_${VERSION}
            powershell Compress-Archive -Path dist/chat-log-cleaner_${VERSION} -DestinationPath dist/chat-log-cleaner_${VERSION}-windows.zip
          elif [ "${RUNNER_OS}" == "macOS" ]; then
            mv dist/main.app dist/chat-log-cleaner_${VERSION}.app
            zip -r dist/chat-log-cleaner_${VERSION}-macos.zip dist/chat-log-cleaner_${VERSION}.app
          else
            mv dist/main dist/chat-log-cleaner_${VERSION}
            tar -czf dist/chat-log-cleaner_${VERSION}-linux.tar.gz -C dist chat-log-cleaner_${VERSION}
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: chat-log-cleaner-${{ matrix.os }}
          # Use the correct pattern based on the OS
          path: ${{ runner.os == 'Linux' && 'dist/*.tar.gz' || 'dist/*.zip' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        # No 'name' specified, downloads all artifacts to directories named after the artifact

      - name: Create GitHub Release and upload assets
        uses: ncipollo/release-action@v1
        with:
          name: v${{ needs.build.outputs.version }} # Use the output from the build job
          tag: v${{ needs.build.outputs.version }} # Use the output from the build job
          token: ${{ secrets.GITHUB_TOKEN }}
          # Update artifacts glob pattern to match downloaded files within their directories
          artifacts: chat-log-cleaner-*/*.*
          removeArtifacts: true # Keep this if you want the action to remove the downloaded artifact directories after upload
