# GitHub Actions workflow: 自动在多个平台上构建可执行文件
name: Build Multi-Platform
permissions:
  contents: write  # 允许创建和更新 release
  packages: write  # 允许管理发布包
  actions: read    # 允许读取 Actions 元数据

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      VERSION: 0.2 # Updated version to 0.2
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable
        run: |
          pyinstaller --noconfirm --onefile --windowed main.py

      - name: Rename and package executable
        run: |
          if [ "${RUNNER_OS}" == "Windows" ]; then
            mv dist/main.exe dist/chat-log-cleaner_${VERSION}.exe
            powershell Compress-Archive -Path dist/chat-log-cleaner_${VERSION}.exe -DestinationPath dist/chat-log-cleaner_${VERSION}-windows.zip
          elif [ "${RUNNER_OS}" == "macOS" ]; then
            mv dist/main.app dist/chat-log-cleaner_${VERSION}.app
            zip -r dist/chat-log-cleaner_${VERSION}-macos.zip dist/chat-log-cleaner_${VERSION}.app
          else
            mv dist/main dist/chat-log-cleaner_${VERSION}
            tar -czf dist/chat-log-cleaner_${VERSION}-linux.tar.gz -C dist chat-log-cleaner_${VERSION}
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: chat-log-cleaner-${{ matrix.os }}
          path: |
            dist/*.zip
            dist/*.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        # No 'name' specified, downloads all artifacts to directories named after the artifact

      - name: Create GitHub Release and upload assets
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.VERSION }} # Use the environment variable for consistency
          token: ${{ secrets.GITHUB_TOKEN }}
          # Update artifacts glob pattern to match downloaded files within their directories
          artifacts: chat-log-cleaner-*/*.*
          removeArtifacts: true # Keep this if you want the action to remove the downloaded artifact directories after upload
